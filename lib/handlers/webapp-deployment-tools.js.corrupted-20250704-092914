#!/usr/bin/env node

/**
 * 噫 WebApp Deployment Tools Handler
 * Claude-AppsScript-Pro - WEB繧｢繝励Μ繝・・繝ｭ繧､讖溯・
 * 
 * 讖溯・:
 * - Apps Script WebApp 繝・・繝ｭ繧､繝ｻ譖ｴ譁ｰ
 * - 繝・・繝ｭ繧､URL蜿門ｾ励・邂｡逅・
 * - 繝舌・繧ｸ繝ｧ繝ｳ邂｡逅・・繝ｭ繝ｼ繝ｫ繝舌ャ繧ｯ
 * - 繧｢繧ｯ繧ｻ繧ｹ讓ｩ髯占ｨｭ螳壹・邂｡逅・
 * - 繝・・繝ｭ繧､迥ｶ豕∫屮隕悶・繝ｭ繧ｰ
 */

/**
 * WebApp Deployment Tools 繝上Φ繝峨Λ繝ｼ
 * Apps Script WebApp 縺ｮ繝・・繝ｭ繧､繝ｻ邂｡逅・ｩ溯・繧呈署萓・
 */
export class WebAppDeploymentHandler {
  constructor(googleAPIsManager, diagnosticLogger) {
    this.googleAPIsManager = googleAPIsManager;
    this.logger = diagnosticLogger;
    this.name = 'WebAppDeploymentHandler';
  }

  /**
   * 繝上Φ繝峨Λ繝ｼ縺ｧ蛻ｩ逕ｨ蜿ｯ閭ｽ縺ｪ繝・・繝ｫ荳隕ｧ繧貞叙蠕・
   */
  getAvailableTools() {
    return [
      {
        name: 'deploy_webapp',
        description: 'Apps Script 繝励Ο繧ｸ繧ｧ繧ｯ繝医ｒ Web 繧｢繝励Μ縺ｨ縺励※繝・・繝ｭ繧､繝ｻ蜈ｬ髢・,
        inputSchema: {
          type: 'object',
          properties: {
            script_id: {
              type: 'string',
              description: 'Apps Script 繝励Ο繧ｸ繧ｧ繧ｯ繝・ID'
            },
            version_description: {
              type: 'string',
              description: '繝・・繝ｭ繧､繝舌・繧ｸ繝ｧ繝ｳ縺ｮ隱ｬ譏・,
              default: 'Web App Deployment'
            },
            access_type: {
              type: 'string',
              description: '繧｢繧ｯ繧ｻ繧ｹ讓ｩ髯舌ち繧､繝・,
              enum: ['MYSELF', 'DOMAIN', 'ANYONE', 'ANYONE_ANONYMOUS'],
              default: 'ANYONE_ANONYMOUS'
            },
            execute_as: {
              type: 'string', 
              description: '螳溯｡瑚・ｨｭ螳・,
              enum: ['USER_ACCESSING', 'USER_DEPLOYING'],
              default: 'USER_DEPLOYING'
            }
          },
          required: ['script_id']
        }
      },
      {
        name: 'get_webapp_url',
        description: '繝・・繝ｭ繧､貂医∩ Web 繧｢繝励Μ縺ｮ URL 繧貞叙蠕・,
        inputSchema: {
          type: 'object',
          properties: {
            script_id: {
              type: 'string',
              description: 'Apps Script 繝励Ο繧ｸ繧ｧ繧ｯ繝・ID'
            },
            deployment_id: {
              type: 'string',
              description: '迚ｹ螳壹・繝・・繝ｭ繧､繝｡繝ｳ繝・ID・医が繝励す繝ｧ繝ｳ・・
            }
          },
          required: ['script_id']
        }
      },
      {
        name: 'update_webapp_deployment',
        description: '譌｢蟄倥・ Web 繧｢繝励Μ繝・・繝ｭ繧､繝｡繝ｳ繝医ｒ譖ｴ譁ｰ',
        inputSchema: {
          type: 'object',
          properties: {
            script_id: {
              type: 'string',
              description: 'Apps Script 繝励Ο繧ｸ繧ｧ繧ｯ繝・ID'
            },
            deployment_id: {
              type: 'string',
              description: '譖ｴ譁ｰ蟇ｾ雎｡縺ｮ繝・・繝ｭ繧､繝｡繝ｳ繝・ID'
            },
            version_description: {
              type: 'string',
              description: '譁ｰ縺励＞繝舌・繧ｸ繝ｧ繝ｳ縺ｮ隱ｬ譏・,
              default: 'Updated Web App'
            }
          },
          required: ['script_id', 'deployment_id']
        }
      },
      {
        name: 'list_webapp_deployments',
        description: 'Apps Script 繝励Ο繧ｸ繧ｧ繧ｯ繝医・蜈ｨ繝・・繝ｭ繧､繝｡繝ｳ繝井ｸ隕ｧ繧貞叙蠕・,
        inputSchema: {
          type: 'object',
          properties: {
            script_id: {
              type: 'string',
              description: 'Apps Script 繝励Ο繧ｸ繧ｧ繧ｯ繝・ID'
            },
            include_inactive: {
              type: 'boolean',
              description: '髱槭い繧ｯ繝・ぅ繝悶↑繝・・繝ｭ繧､繝｡繝ｳ繝医ｂ蜷ｫ繧√ｋ',
              default: false
            }
          },
          required: ['script_id']
        }
      },
      {
        name: 'delete_webapp_deployment',
        description: 'Web 繧｢繝励Μ繝・・繝ｭ繧､繝｡繝ｳ繝医ｒ蜑企勁',
        inputSchema: {
          type: 'object',
          properties: {
            script_id: {
              type: 'string',
              description: 'Apps Script 繝励Ο繧ｸ繧ｧ繧ｯ繝・ID'
            },
            deployment_id: {
              type: 'string',
              description: '蜑企勁蟇ｾ雎｡縺ｮ繝・・繝ｭ繧､繝｡繝ｳ繝・ID'
            }
          },
          required: ['script_id', 'deployment_id']
        }
      }
    ];
  }

  /**
   * 繝・・繝ｫ螳溯｡後・繝｡繧､繝ｳ蜃ｦ逅・
   */
  async handleToolCall(name, args) {
    this.logger.log(`WebApp Deployment: ${name} called with:`, args);

    try {
      switch (name) {
        case 'deploy_webapp':
          return await this.deployWebApp(args);
        case 'get_webapp_url':
          return await this.getWebAppUrl(args);
        case 'update_webapp_deployment':
          return await this.updateWebAppDeployment(args);
        case 'list_webapp_deployments':
          return await this.listWebAppDeployments(args);
        case 'delete_webapp_deployment':
          return await this.deleteWebAppDeployment(args);
        default:
          throw new Error(`Unknown tool: ${name}`);
      }
    } catch (error) {
      this.logger.error(`WebApp Deployment error in ${name}:`, error);
      throw error;
    }
  }

  /**
   * Web 繧｢繝励Μ縺ｨ縺励※繝・・繝ｭ繧､繝ｻ蜈ｬ髢・
   */
  async deployWebApp(args) {
    const { script_id, version_description = 'Web App Deployment', access_type = 'ANYONE_ANONYMOUS', execute_as = 'USER_DEPLOYING' } = args;

    try {
      this.logger.log(`Deploying WebApp for script: ${script_id}`);

      // Apps Script API 繧､繝ｳ繧ｹ繧ｿ繝ｳ繧ｹ蜿門ｾ・
      const script = this.googleAPIsManager.getScriptApi();

      // 譁ｰ縺励＞繝舌・繧ｸ繝ｧ繝ｳ繧剃ｽ懈・
      this.logger.log('Creating new version...');
      const versionResponse = await script.projects.versions.create({
        scriptId: script_id,
        requestBody: {
          description: version_description
        }
      });

      const versionNumber = versionResponse.data.versionNumber;
      this.logger.log(`Created version: ${versionNumber}`);

      // Web 繧｢繝励Μ縺ｨ縺励※繝・・繝ｭ繧､
      this.logger.log('Creating deployment...');
      const deploymentResponse = await script.projects.deployments.create({
        scriptId: script_id,
        requestBody: {
          versionNumber: versionNumber,
          description: version_description,
          manifestFileName: 'appsscript.json',
          deploymentConfig: {
            scriptId: script_id,
            description: version_description,
            manifestFileName: 'appsscript.json',
            deploymentConfig: {
              access: access_type,
              executeAs: execute_as
            }
          }
        }
      });

      const deploymentId = deploymentResponse.data.deploymentId;
      const webAppUrl = deploymentResponse.data.entryPoints?.find(
        entry => entry.entryPointType === 'WEB_APP'
      )?.webApp?.url;

      this.logger.log(`Deployment successful. ID: ${deploymentId}`);

      return {
        content: [
          {
            type: "text",
            text: `噫 **Web App 繝・・繝ｭ繧､謌仙粥**

**投 繝・・繝ｭ繧､諠・ｱ**
- **繧ｹ繧ｯ繝ｪ繝励ヨ ID**: ${script_id}
- **繝・・繝ｭ繧､繝｡繝ｳ繝・ID**: ${deploymentId}
- **繝舌・繧ｸ繝ｧ繝ｳ**: ${versionNumber}
- **隱ｬ譏・*: ${version_description}

**迫 Web App URL**
\`\`\`
${webAppUrl || 'URL蜿門ｾ嶺ｸｭ...'}
\`\`\`

**笞呻ｸ・險ｭ螳・*
- **繧｢繧ｯ繧ｻ繧ｹ讓ｩ髯・*: ${access_type}
- **螳溯｡瑚・*: ${execute_as}

**統 驥崎ｦ∽ｺ矩・*
- Web App 縺悟茜逕ｨ蜿ｯ閭ｽ縺ｫ縺ｪ繧九∪縺ｧ謨ｰ蛻・°縺九ｋ蝣ｴ蜷医′縺ゅｊ縺ｾ縺・
- URL 縺ｯ螟画峩縺輔ｌ繧九％縺ｨ縺後≠繧九◆繧√∝ｮ壽悄逧・↓遒ｺ隱阪＠縺ｦ縺上□縺輔＞
- 繧｢繧ｯ繧ｻ繧ｹ讓ｩ髯舌・螟画峩縺ｯ蜀阪ョ繝励Ο繧､縺悟ｿ・ｦ√〒縺・

**識 谺｡縺ｮ繧ｹ繝・ャ繝・*
- \`get_webapp_url\` 縺ｧURL蜀咲｢ｺ隱・
- \`list_webapp_deployments\` 縺ｧ繝・・繝ｭ繧､荳隕ｧ遒ｺ隱・
- Web App 縺ｮ繝・せ繝亥ｮ溯｡形
          }
        ]
      };

    } catch (error) {
      this.logger.error('WebApp deployment failed:', error);
      
      return {
        content: [
          {
            type: "text",
            text: `笶・**Web App 繝・・繝ｭ繧､螟ｱ謨・*

**繧ｨ繝ｩ繝ｼ隧ｳ邏ｰ**: ${error.message}

**剥 繧医￥縺ゅｋ蜴溷屏**
1. **讓ｩ髯蝉ｸ崎ｶｳ**: Apps Script API 縺ｮ譛牙柑蛹悶′蠢・ｦ・
2. **繧ｹ繧ｯ繝ｪ繝励ヨ險ｭ螳・*: appsscript.json 縺ｮ webapp 險ｭ螳壹′蠢・ｦ・
3. **OAuth 繧ｹ繧ｳ繝ｼ繝・*: 驕ｩ蛻・↑繧ｹ繧ｳ繝ｼ繝励・險ｭ螳壹′蠢・ｦ・

**屏・・隗｣豎ｺ譁ｹ豕・*
1. 繧ｹ繧ｯ繝ｪ繝励ヨ繧ｨ繝・ぅ繧ｿ縺ｧ縲後ョ繝励Ο繧､ > 譁ｰ縺励＞繝・・繝ｭ繧､縲阪ｒ謇句虚螳溯｡・
2. 蠢・ｦ√↑讓ｩ髯舌ｒ謇ｿ隱・
3. appsscript.json 縺ｫ webapp 險ｭ螳壹ｒ霑ｽ蜉

**庁 繧ｵ繝昴・繝・*
\`diagnose_script_issues\` 縺ｧ繝励Ο繧ｸ繧ｧ繧ｯ繝郁ｨｺ譁ｭ繧貞ｮ溯｡後＠縺ｦ縺上□縺輔＞`
          }
        ]
      };
    }
  }

  /**
   * 繝・・繝ｭ繧､貂医∩ Web 繧｢繝励Μ縺ｮ URL 繧貞叙蠕・
   */
  async getWebAppUrl(args) {
    const { script_id, deployment_id } = args;

    try {
      this.logger.log(`Getting WebApp URL for script: ${script_id}`);

      const script = this.googleAPIsManager.getScriptApi();

      if (deployment_id) {
        // 迚ｹ螳壹・繝・・繝ｭ繧､繝｡繝ｳ繝域ュ蝣ｱ繧貞叙蠕・
        const deploymentResponse = await script.projects.deployments.get({
          scriptId: script_id,
          deploymentId: deployment_id
        });

        const webAppUrl = deploymentResponse.data.entryPoints?.find(
          entry => entry.entryPointType === 'WEB_APP'
        )?.webApp?.url;

        return {
          content: [
            {
              type: "text",
              text: `迫 **Web App URL 蜿門ｾ・*

**投 繝・・繝ｭ繧､繝｡繝ｳ繝域ュ蝣ｱ**
- **繧ｹ繧ｯ繝ｪ繝励ヨ ID**: ${script_id}
- **繝・・繝ｭ繧､繝｡繝ｳ繝・ID**: ${deployment_id}
- **隱ｬ譏・*: ${deploymentResponse.data.description || '縺ｪ縺・}

**倹 Web App URL**
\`\`\`
${webAppUrl || 'URL 縺瑚ｦ九▽縺九ｊ縺ｾ縺帙ｓ'}
\`\`\`

**統 豕ｨ諢丈ｺ矩・*
- URL 繧偵ヶ繝・け繝槭・繧ｯ縺励※菫晏ｭ倥＠縺ｦ縺上□縺輔＞
- 繝励Λ繧､繝吶・繝医ョ繝励Ο繧､縺ｮ蝣ｴ蜷医∬ｪ崎ｨｼ縺悟ｿ・ｦ√〒縺兪
            }
          ]
        };
      } else {
        // 蜈ｨ繝・・繝ｭ繧､繝｡繝ｳ繝医°繧画怙譁ｰ縺ｮWebApp繧貞叙蠕・
        const deploymentsResponse = await script.projects.deployments.list({
          scriptId: script_id
        });

        const webAppDeployments = deploymentsResponse.data.deployments?.filter(
          deployment => deployment.entryPoints?.some(entry => entry.entryPointType === 'WEB_APP')
        ) || [];

        if (webAppDeployments.length === 0) {
          return {
            content: [
              {
                type: "text",
                text: `笞・・**Web App 繝・・繝ｭ繧､繝｡繝ｳ繝医′隕九▽縺九ｊ縺ｾ縺帙ｓ**

**繧ｹ繧ｯ繝ｪ繝励ヨ ID**: ${script_id}

**屏・・蠢・ｦ√↑謫堺ｽ・*
1. \`deploy_webapp\` 繧剃ｽｿ逕ｨ縺励※繝・・繝ｭ繧､繧剃ｽ懈・
2. 縺ｾ縺溘・繧ｹ繧ｯ繝ｪ繝励ヨ繧ｨ繝・ぅ繧ｿ縺九ｉ謇句虚繝・・繝ｭ繧､

**庁 繝偵Φ繝・*
\`list_webapp_deployments\` 縺ｧ蜈ｨ繝・・繝ｭ繧､繝｡繝ｳ繝医ｒ遒ｺ隱阪〒縺阪∪縺兪
              }
            ]
          };
        }

        // 譛譁ｰ縺ｮWebApp繝・・繝ｭ繧､繝｡繝ｳ繝医ｒ蜿門ｾ・
        const latestDeployment = webAppDeployments[0];
        const webAppUrl = latestDeployment.entryPoints?.find(
          entry => entry.entryPointType === 'WEB_APP'
        )?.webApp?.url;

        return {
          content: [
            {
              type: "text",
              text: `迫 **譛譁ｰ Web App URL**

**投 繝・・繝ｭ繧､繝｡繝ｳ繝域ュ蝣ｱ**
- **繧ｹ繧ｯ繝ｪ繝励ヨ ID**: ${script_id}
- **繝・・繝ｭ繧､繝｡繝ｳ繝・ID**: ${latestDeployment.deploymentId}
- **隱ｬ譏・*: ${latestDeployment.description || '縺ｪ縺・}
- **菴懈・譌･**: ${latestDeployment.createdTimestamp || '縺ｪ縺・}

**倹 Web App URL**
\`\`\`
${webAppUrl || 'URL 縺瑚ｦ九▽縺九ｊ縺ｾ縺帙ｓ'}
\`\`\`

**搭 縺昴・莉悶・繝・・繝ｭ繧､繝｡繝ｳ繝・*
邱乗焚: ${webAppDeployments.length}蛟義
            }
          ]
        };
      }

    } catch (error) {
      this.logger.error('Failed to get WebApp URL:', error);
      
      return {
        content: [
          {
            type: "text",
            text: `笶・**Web App URL 蜿門ｾ怜､ｱ謨・*

**繧ｨ繝ｩ繝ｼ**: ${error.message}

**剥 蜿ｯ閭ｽ縺ｪ蜴溷屏**
1. 繝・・繝ｭ繧､繝｡繝ｳ繝医′蟄伜惠縺励↑縺・
2. 繧｢繧ｯ繧ｻ繧ｹ讓ｩ髯蝉ｸ崎ｶｳ
3. 繧ｹ繧ｯ繝ｪ繝励ヨ ID 縺碁俣驕輔▲縺ｦ縺・ｋ

**屏・・隗｣豎ｺ譁ｹ豕・*
1. \`list_webapp_deployments\` 縺ｧ繝・・繝ｭ繧､荳隕ｧ遒ｺ隱・
2. Apps Script 繧ｳ繝ｳ繧ｽ繝ｼ繝ｫ縺ｧ謇句虚遒ｺ隱港
          }
        ]
      };
    }
  }

  /**
   * 譌｢蟄倥・ Web 繧｢繝励Μ繝・・繝ｭ繧､繝｡繝ｳ繝医ｒ譖ｴ譁ｰ
   */
  async updateWebAppDeployment(args) {
    const { script_id, deployment_id, version_description = 'Updated Web App' } = args;

    try {
      this.logger.log(`Updating WebApp deployment: ${deployment_id}`);

      const script = this.googleAPIsManager.getScriptApi();

      // 譁ｰ縺励＞繝舌・繧ｸ繝ｧ繝ｳ繧剃ｽ懈・
      const versionResponse = await script.projects.versions.create({
        scriptId: script_id,
        requestBody: {
          description: version_description
        }
      });

      const versionNumber = versionResponse.data.versionNumber;

      // 繝・・繝ｭ繧､繝｡繝ｳ繝医ｒ譖ｴ譁ｰ
      const updateResponse = await script.projects.deployments.update({
        scriptId: script_id,
        deploymentId: deployment_id,
        requestBody: {
          deploymentConfig: {
            versionNumber: versionNumber,
            description: version_description
          }
        }
      });

      const webAppUrl = updateResponse.data.entryPoints?.find(
        entry => entry.entryPointType === 'WEB_APP'
      )?.webApp?.url;

      return {
        content: [
          {
            type: "text",
            text: `売 **Web App 繝・・繝ｭ繧､繝｡繝ｳ繝域峩譁ｰ謌仙粥**

**投 譖ｴ譁ｰ諠・ｱ**
- **繧ｹ繧ｯ繝ｪ繝励ヨ ID**: ${script_id}
- **繝・・繝ｭ繧､繝｡繝ｳ繝・ID**: ${deployment_id}
- **譁ｰ繝舌・繧ｸ繝ｧ繝ｳ**: ${versionNumber}
- **隱ｬ譏・*: ${version_description}

**倹 Web App URL**
\`\`\`
${webAppUrl || '螟画峩縺ｪ縺・}
\`\`\`

**統 驥崎ｦ∽ｺ矩・*
- 譖ｴ譁ｰ縺悟渚譏縺輔ｌ繧九∪縺ｧ謨ｰ蛻・°縺九ｋ蝣ｴ蜷医′縺ゅｊ縺ｾ縺・
- 繝悶Λ繧ｦ繧ｶ繧ｭ繝｣繝・す繝･縺ｮ繧ｯ繝ｪ繧｢縺悟ｿ・ｦ√↑蝣ｴ蜷医′縺ゅｊ縺ｾ縺・

**識 谺｡縺ｮ繧ｹ繝・ャ繝・*
- Web App 縺ｮ繝・せ繝亥ｮ溯｡・
- 譁ｰ讖溯・縺ｮ蜍穂ｽ懃｢ｺ隱港
          }
        ]
      };

    } catch (error) {
      this.logger.error('Failed to update WebApp deployment:', error);
      
      return {
        content: [
          {
            type: "text",
            text: `笶・**Web App 繝・・繝ｭ繧､繝｡繝ｳ繝域峩譁ｰ螟ｱ謨・*

**繧ｨ繝ｩ繝ｼ**: ${error.message}

**剥 繧医￥縺ゅｋ蜴溷屏**
1. 繝・・繝ｭ繧､繝｡繝ｳ繝・ID 縺檎┌蜉ｹ
2. 讓ｩ髯蝉ｸ崎ｶｳ
3. 繧ｹ繧ｯ繝ｪ繝励ヨ縺ｫ繧ｨ繝ｩ繝ｼ縺後≠繧・

**屏・・隗｣豎ｺ譁ｹ豕・*
1. \`list_webapp_deployments\` 縺ｧ ID 遒ｺ隱・
2. \`diagnose_script_issues\` 縺ｧ繧ｹ繧ｯ繝ｪ繝励ヨ險ｺ譁ｭ`
          }
        ]
      };
    }
  }

  /**
   * Apps Script 繝励Ο繧ｸ繧ｧ繧ｯ繝医・蜈ｨ繝・・繝ｭ繧､繝｡繝ｳ繝井ｸ隕ｧ繧貞叙蠕・
   */
  async listWebAppDeployments(args) {
    const { script_id, include_inactive = false } = args;

    try {
      this.logger.log(`Listing deployments for script: ${script_id}`);

      const script = this.googleAPIsManager.getScriptApi();
      
      const deploymentsResponse = await script.projects.deployments.list({
        scriptId: script_id
      });

      const deployments = deploymentsResponse.data.deployments || [];
      
      // WebApp 繝・・繝ｭ繧､繝｡繝ｳ繝医・縺ｿ繝輔ぅ繝ｫ繧ｿ
      const webAppDeployments = deployments.filter(deployment => {
        const hasWebApp = deployment.entryPoints?.some(entry => entry.entryPointType === 'WEB_APP');
        if (!include_inactive) {
          return hasWebApp && deployment.deploymentConfig;
        }
        return hasWebApp;
      });

      if (webAppDeployments.length === 0) {
        return {
          content: [
            {
              type: "text",
              text: `搭 **Web App 繝・・繝ｭ繧､繝｡繝ｳ繝井ｸ隕ｧ**

**繧ｹ繧ｯ繝ｪ繝励ヨ ID**: ${script_id}

笞・・**Web App 繝・・繝ｭ繧､繝｡繝ｳ繝医′隕九▽縺九ｊ縺ｾ縺帙ｓ**

**屏・・謗ｨ螂ｨ謫堺ｽ・*
1. \`deploy_webapp\` 縺ｧ譁ｰ隕上ョ繝励Ο繧､菴懈・
2. Apps Script 繧ｨ繝・ぅ繧ｿ縺ｧ謇句虚繝・・繝ｭ繧､

**庁 繝偵Φ繝・*
- 蛻晏屓繝・・繝ｭ繧､譎ゅ・謇句虚縺ｧ縺ｮ讓ｩ髯先価隱阪′蠢・ｦ√〒縺・
- appsscript.json 縺ｫ webapp 險ｭ螳壹′蠢・ｦ√〒縺兪
            }
          ]
        };
      }

      let deploymentList = webAppDeployments.map((deployment, index) => {
        const webAppEntry = deployment.entryPoints?.find(entry => entry.entryPointType === 'WEB_APP');
        const webAppUrl = webAppEntry?.webApp?.url || 'URL蜿門ｾ嶺ｸ榊庄';
        
        return `**${index + 1}. 繝・・繝ｭ繧､繝｡繝ｳ繝・*
- **ID**: \`${deployment.deploymentId}\`
- **隱ｬ譏・*: ${deployment.description || '縺ｪ縺・}
- **菴懈・譌･**: ${deployment.createdTimestamp || '縺ｪ縺・}
- **URL**: \`${webAppUrl}\`
- **繧｢繧ｯ繧ｻ繧ｹ**: ${webAppEntry?.webApp?.access || '縺ｪ縺・}
- **螳溯｡瑚・*: ${webAppEntry?.webApp?.executeAs || '縺ｪ縺・}`;
      }).join('\n\n');

      return {
        content: [
          {
            type: "text",
            text: `搭 **Web App 繝・・繝ｭ繧､繝｡繝ｳ繝井ｸ隕ｧ**

**繧ｹ繧ｯ繝ｪ繝励ヨ ID**: ${script_id}
**邱乗焚**: ${webAppDeployments.length}蛟・

${deploymentList}

**屏・・蛻ｩ逕ｨ蜿ｯ閭ｽ縺ｪ謫堺ｽ・*
- \`get_webapp_url\`: 迚ｹ螳啅RL縺ｮ蜿門ｾ・
- \`update_webapp_deployment\`: 繝・・繝ｭ繧､繝｡繝ｳ繝域峩譁ｰ
- \`delete_webapp_deployment\`: 繝・・繝ｭ繧､繝｡繝ｳ繝亥炎髯､

**統 豕ｨ諢丈ｺ矩・*
- 譛譁ｰ縺ｮ繝・・繝ｭ繧､繝｡繝ｳ繝医′騾壼ｸｸ縺ｯ繧｢繧ｯ繝・ぅ繝悶〒縺・
- URL 縺ｯ蜷・ョ繝励Ο繧､繝｡繝ｳ繝医〒逡ｰ縺ｪ繧句ｴ蜷医′縺ゅｊ縺ｾ縺兪
          }
        ]
      };

    } catch (error) {
      this.logger.error('Failed to list WebApp deployments:', error);
      
      return {
        content: [
          {
            type: "text",
            text: `笶・**繝・・繝ｭ繧､繝｡繝ｳ繝井ｸ隕ｧ蜿門ｾ怜､ｱ謨・*

**繧ｨ繝ｩ繝ｼ**: ${error.message}

**剥 蜿ｯ閭ｽ縺ｪ蜴溷屏**
1. 繧ｹ繧ｯ繝ｪ繝励ヨ ID 縺碁俣驕輔▲縺ｦ縺・ｋ
2. 繧｢繧ｯ繧ｻ繧ｹ讓ｩ髯蝉ｸ崎ｶｳ
3. Apps Script API 縺檎┌蜉ｹ

**屏・・隗｣豎ｺ譁ｹ豕・*
1. 繧ｹ繧ｯ繝ｪ繝励ヨ ID 繧貞・遒ｺ隱・
2. \`test_apis\` 縺ｧ API迥ｶ豕∫｢ｺ隱港
          }
        ]
      };
    }
  }

  /**
   * Web 繧｢繝励Μ繝・・繝ｭ繧､繝｡繝ｳ繝医ｒ蜑企勁
   */
  async deleteWebAppDeployment(args) {
    const { script_id, deployment_id } = args;

    try {
      this.logger.log(`Deleting WebApp deployment: ${deployment_id}`);

      const script = this.googleAPIsManager.getScriptApi();

      // 繝・・繝ｭ繧､繝｡繝ｳ繝亥炎髯､
      await script.projects.deployments.delete({
        scriptId: script_id,
        deploymentId: deployment_id
      });

      return {
        content: [
          {
            type: "text",
            text: `卵・・**Web App 繝・・繝ｭ繧､繝｡繝ｳ繝亥炎髯､謌仙粥**

**投 蜑企勁諠・ｱ**
- **繧ｹ繧ｯ繝ｪ繝励ヨ ID**: ${script_id}
- **繝・・繝ｭ繧､繝｡繝ｳ繝・ID**: ${deployment_id}

**統 驥崎ｦ∽ｺ矩・*
- Web App URL 縺ｯ蜊ｳ蠎ｧ縺ｫ辟｡蜉ｹ縺ｫ縺ｪ繧翫∪縺・
- 蜑企勁縺ｯ蜿悶ｊ豸医○縺ｾ縺帙ｓ
- 蠢・ｦ√↓蠢懊§縺ｦ譁ｰ縺励＞繝・・繝ｭ繧､繝｡繝ｳ繝医ｒ菴懈・縺励※縺上□縺輔＞

**識 谺｡縺ｮ繧ｹ繝・ャ繝・*
- \`list_webapp_deployments\` 縺ｧ蜑企勁遒ｺ隱・
- 蠢・ｦ√↓蠢懊§縺ｦ \`deploy_webapp\` 縺ｧ蜀阪ョ繝励Ο繧､`
          }
        ]
      };

    } catch (error) {
      this.logger.error('Failed to delete WebApp deployment:', error);
      
      return {
        content: [
          {
            type: "text",
            text: `笶・**Web App 繝・・繝ｭ繧､繝｡繝ｳ繝亥炎髯､螟ｱ謨・*

**繧ｨ繝ｩ繝ｼ**: ${error.message}

**剥 繧医￥縺ゅｋ蜴溷屏**
1. 繝・・繝ｭ繧､繝｡繝ｳ繝・ID 縺檎┌蜉ｹ
2. 蜑企勁讓ｩ髯蝉ｸ崎ｶｳ
3. 譌｢縺ｫ蜑企勁貂医∩

**屏・・隗｣豎ｺ譁ｹ豕・*
1. \`list_webapp_deployments\` 縺ｧ迴ｾ蝨ｨ縺ｮ迥ｶ豕∫｢ｺ隱・
2. 豁｣縺励＞ deployment_id 繧呈欠螳啻
          }
        ]
      };
    }
  }
}
